//HintName: CpuInstructions.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Runtime.CompilerServices;
using Yabal.Instructions;

namespace Yabal.Devices;

/// <summary>
/// Default instruction set for the Astro-8 CPU.
/// </summary>
public partial class Cpu<THandler>
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private partial void Step(ref StepContext context)
    {
        switch (context.InstructionId)
        {
            case 0:
                FETCH(ref context);
                break;
            case 1:
                AIN(ref context);
                break;
            case 2:
                BIN(ref context);
                break;
            case 3:
                CIN(ref context);
                break;
            case 4:
                LDIA(ref context);
                break;
            case 5:
                LDIB(ref context);
                break;
            case 6:
                STA(ref context);
                break;
            case 7:
                ADD(ref context);
                break;
            case 8:
                SUB(ref context);
                break;
            case 9:
                MULT(ref context);
                break;
            case 10:
                DIV(ref context);
                break;
            case 11:
                JMP(ref context);
                break;
            case 12:
                JMPZ(ref context);
                break;
            case 13:
                JMPC(ref context);
                break;
            case 14:
                JREG(ref context);
                break;
            case 15:
                LDAIN(ref context);
                break;
            case 16:
                STAOUT(ref context);
                break;
            case 17:
                LDLGE(ref context);
                break;
            case 18:
                STLGE(ref context);
                break;
            case 19:
                LDW(ref context);
                break;
            case 20:
                SWP(ref context);
                break;
            case 21:
                SWPC(ref context);
                break;
            case 22:
                PCR(ref context);
                break;
            case 23:
                BSL(ref context);
                break;
            case 24:
                BSR(ref context);
                break;
            case 25:
                AND(ref context);
                break;
            case 26:
                OR(ref context);
                break;
            case 27:
                NOT(ref context);
                break;
            case 28:
                BNK(ref context);
                break;
            case 29:
                VBUF(ref context);
                break;
            case 30:
                BNKC(ref context);
                break;
            case 31:
                LDWB(ref context);
                break;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void FETCH(ref StepContext context)
    {
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void AIN(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void BIN(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // WB
            context.B = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void CIN(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // WC
            context.C = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void LDIA(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void LDIB(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // WB
            context.B = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void STA(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RA
            context.Bus = context.A;
            // WM
            context.Set(context.MemoryIndex, context.Bus);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void ADD(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    // ADD
                    context.Bus = context.A + context.B;
                    context.FlagA = context.Bus == 0;
        
                    if (context.Bus >= 65534)
                    {
                        context.Bus -= 65534;
                        context.FlagB = true;
                    }
                    else
                    {
                        context.FlagB = false;
                    }
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void SUB(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    // SU
                    context.Bus = context.A - context.B;
                    context.FlagA = context.Bus == 0;
        
                    if (context.Bus < 0)
                    {
                        context.Bus = 65534 + context.Bus;
                        context.FlagB = false;
                    }
                    else
                    {
                        context.FlagB = true;
                    }
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void MULT(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    // MU
                    context.Bus = context.A * context.B;
                    context.FlagA = context.Bus == 0;
        
                    if (context.Bus >= 65534)
                    {
                        context.Bus -= 65534;
                        context.FlagB = true;
                    }
                    else
                    {
                        context.FlagB = false;
                    }
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DIV(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    // DI
                    if (context.B != 0)
                    {
                        context.Bus = context.A / context.B;
                        context.FlagA = context.Bus == 0;
                    }
                    else
                    {
                        context.FlagA = false;
                        context.Bus = 0;
                    }
        
                    if (context.Bus >= 65534)
                    {
                        context.Bus -= 65534;
                        context.FlagB = true;
                    }
                    else
                    {
                        context.FlagB = false;
                    }
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void JMP(ref StepContext context)
    {
        // Step 2
        {
            // CR
            context.Bus = context.ProgramCounter;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // J
            context.ProgramCounter = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void JMPZ(ref StepContext context)
    {
        // Step 2
        {
            // CR
            context.Bus = context.ProgramCounter;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // CE
            context.ProgramCounter += 1;
        }
        // Step 4
        if (context.FlagA == false && context.FlagB == false)
        {
        }
        // Step 4
        if (context.FlagA == false && context.FlagB == true)
        {
        }
        // Step 4
        if (context.FlagA == true && context.FlagB == false)
        {
            // J
            context.ProgramCounter = context.Bus;
        }
        // Step 4
        if (context.FlagA == true && context.FlagB == true)
        {
            // J
            context.ProgramCounter = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void JMPC(ref StepContext context)
    {
        // Step 2
        {
            // CR
            context.Bus = context.ProgramCounter;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // CE
            context.ProgramCounter += 1;
        }
        // Step 4
        if (context.FlagA == false && context.FlagB == false)
        {
        }
        // Step 4
        if (context.FlagA == false && context.FlagB == true)
        {
            // J
            context.ProgramCounter = context.Bus;
        }
        // Step 4
        if (context.FlagA == true && context.FlagB == false)
        {
        }
        // Step 4
        if (context.FlagA == true && context.FlagB == true)
        {
            // J
            context.ProgramCounter = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void JREG(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // J
            context.ProgramCounter = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void LDAIN(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void STAOUT(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 3
        {
            // RB
            context.Bus = context.B;
            // WM
            context.Set(context.MemoryIndex, context.Bus);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void LDLGE(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // BNK
            context.Bank = context.Bus;
        }
        // Step 3
        {
            // CR
            context.Bus = context.ProgramCounter;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 4
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // AW
            context.MemoryIndex = context.Bus;
            // CE
            context.ProgramCounter += 1;
        }
        // Step 5
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void STLGE(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // BNK
            context.Bank = context.Bus;
        }
        // Step 3
        {
            // CR
            context.Bus = context.ProgramCounter;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 4
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // AW
            context.MemoryIndex = context.Bus;
            // CE
            context.ProgramCounter += 1;
        }
        // Step 5
        {
            // RA
            context.Bus = context.A;
            // WM
            context.Set(context.MemoryIndex, context.Bus);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void LDW(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // BNK
            context.Bank = context.Bus;
        }
        // Step 3
        {
            // CR
            context.Bus = context.ProgramCounter;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 4
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // WA
            context.A = context.Bus;
            // CE
            context.ProgramCounter += 1;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void SWP(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // WC
            context.C = context.Bus;
        }
        // Step 3
        {
            // RB
            context.Bus = context.B;
            // WA
            context.A = context.Bus;
        }
        // Step 4
        {
            // RC
            context.Bus = context.C;
            // WB
            context.B = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void SWPC(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // WB
            context.B = context.Bus;
        }
        // Step 3
        {
            // RC
            context.Bus = context.C;
            // WA
            context.A = context.Bus;
        }
        // Step 4
        {
            // RB
            context.Bus = context.B;
            // WC
            context.C = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void PCR(ref StepContext context)
    {
        // Step 2
        {
            // CR
            context.Bus = context.ProgramCounter;
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void BSL(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    context.Bus = context.A << (context.B);
        
                    
                       if (context.Bus == 0)
                       {
                           context.FlagA = true;
                       }
                       else if (context.Bus >= 65534)
                       {
                           context.Bus -= 65534;
                           context.FlagB = true;
                       }
                    
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void BSR(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    context.Bus = context.A >> (context.B);
        
                    
                       if (context.Bus == 0)
                       {
                           context.FlagA = true;
                       }
                       else if (context.Bus >= 65534)
                       {
                           context.Bus -= 65534;
                           context.FlagB = true;
                       }
                    
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void AND(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    context.Bus = context.A & context.B;
        
                    
                       if (context.Bus == 0)
                       {
                           context.FlagA = true;
                       }
                       else if (context.Bus >= 65534)
                       {
                           context.Bus -= 65534;
                           context.FlagB = true;
                       }
                    
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void OR(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    context.Bus = context.A | context.B;
        
                    
                       if (context.Bus == 0)
                       {
                           context.FlagA = true;
                       }
                       else if (context.Bus >= 65534)
                       {
                           context.Bus -= 65534;
                           context.FlagB = true;
                       }
                    
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void NOT(ref StepContext context)
    {
        // Step 2
        {
            // EO
            context.FlagA = false;
            context.FlagB = false;
        
                    context.Bus = ~context.A & ushort.MaxValue;
        
                    
                       if (context.Bus == 0)
                       {
                           context.FlagA = true;
                       }
                       else if (context.Bus >= 65534)
                       {
                           context.Bus -= 65534;
                           context.FlagB = true;
                       }
                    
            // WA
            context.A = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void BNK(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // BNK
            context.Bank = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void VBUF(ref StepContext context)
    {
        // Step 2
        {
            // VBUF
            context.Handler.FlushScreen();
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void BNKC(ref StepContext context)
    {
        // Step 2
        {
            // RC
            context.Bus = context.C;
            // BNK
            context.Bank = context.Bus;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void LDWB(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.InstructionData;
            // BNK
            context.Bank = context.Bus;
        }
        // Step 3
        {
            // CR
            context.Bus = context.ProgramCounter;
            // AW
            context.MemoryIndex = context.Bus;
        }
        // Step 4
        {
            // RM
            context.Bus = context.Get(context.MemoryIndex);
            // WB
            context.B = context.Bus;
            // CE
            context.ProgramCounter += 1;
        }
    }

}
